// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using USProApplication.DataBase;

#nullable disable

namespace USProApplication.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250112183235_AddChildOrders")]
    partial class AddChildOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("OrderService", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderServices", (string)null);
                });

            modelBuilder.Entity("USProApplication.DataBase.Entities.Counterparty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasComment("Уникальный идентификатор записи.");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT")
                        .HasComment("Адрес");

                    b.Property<string>("BIK")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .HasComment("Банковский идентификационный код");

                    b.Property<string>("Bank")
                        .HasColumnType("TEXT")
                        .HasComment("Банк");

                    b.Property<string>("CorrAccount")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Корреспондентский счет");

                    b.Property<string>("Director")
                        .HasColumnType("TEXT")
                        .HasComment("Руководитель");

                    b.Property<int>("DirectorPosition")
                        .HasColumnType("INTEGER")
                        .HasComment("Должность руководителя");

                    b.Property<bool>("Executor")
                        .HasColumnType("INTEGER")
                        .HasComment("Является исполнителем");

                    b.Property<string>("INN")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasComment("ИНН");

                    b.Property<string>("KPP")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT")
                        .HasComment("КПП");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Наименование");

                    b.Property<string>("OGRN")
                        .HasMaxLength(13)
                        .HasColumnType("TEXT")
                        .HasComment("ОГРН");

                    b.Property<string>("PaymentAccount")
                        .HasColumnType("TEXT")
                        .HasComment("Номер счета");

                    b.HasKey("Id");

                    b.ToTable("Counterparties", t =>
                        {
                            t.HasComment("Контрагенты");
                        });
                });

            modelBuilder.Entity("USProApplication.DataBase.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasComment("Уникальный идентификатор записи.");

                    b.Property<string>("AdditionalService")
                        .HasColumnType("TEXT")
                        .HasComment("Дополнительная услуга");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT")
                        .HasComment("Адрес");

                    b.Property<DateOnly?>("ApprovalBillDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата счета согласования");

                    b.Property<string>("ApprovalBillNumber")
                        .HasColumnType("TEXT")
                        .HasComment("Номер счета согласования");

                    b.Property<int?>("ApprovalPercent")
                        .HasColumnType("INTEGER")
                        .HasComment("Процент оплаты согласования");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор заказчика");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasComment("Электронная почта");

                    b.Property<DateOnly?>("ExecutionBillDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата счета выполнения");

                    b.Property<string>("ExecutionBillNumber")
                        .HasColumnType("TEXT")
                        .HasComment("Номер счета выполнения");

                    b.Property<int?>("ExecutionPercent")
                        .HasColumnType("INTEGER")
                        .HasComment("Процент оплаты выполнения");

                    b.Property<Guid?>("ExecutorId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор исполнителя");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER")
                        .HasComment("Завершено");

                    b.Property<int?>("NDS")
                        .HasColumnType("INTEGER")
                        .HasComment("НДС");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasComment("Наименование");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT")
                        .HasComment("Номер");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT")
                        .HasComment("Идентификатор родительского договора");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasComment("Телефон");

                    b.Property<DateOnly?>("PrepaymentBillDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата счета предоплаты");

                    b.Property<string>("PrepaymentBillNumber")
                        .HasColumnType("TEXT")
                        .HasComment("Номер счета предоплаты");

                    b.Property<int?>("PrepaymentPercent")
                        .HasColumnType("INTEGER")
                        .HasComment("Процент предоплаты");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT")
                        .HasComment("Цена");

                    b.Property<decimal?>("PriceToMeter")
                        .HasColumnType("TEXT")
                        .HasComment("Цена за метр");

                    b.Property<int?>("Square")
                        .HasColumnType("INTEGER")
                        .HasComment("Площадь");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата договора");

                    b.Property<int?>("Term")
                        .HasColumnType("INTEGER")
                        .HasComment("Срок выполнения");

                    b.Property<DateOnly?>("СompletionDate")
                        .HasColumnType("TEXT")
                        .HasComment("Дата завершения");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("ParentId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Заказы");
                        });
                });

            modelBuilder.Entity("USProApplication.DataBase.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasComment("Уникальный идентификатор записи.");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Аббревиатура");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasComment("Описание");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Наименование");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT")
                        .HasComment("Cтоимость");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("OrderService", b =>
                {
                    b.HasOne("USProApplication.DataBase.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USProApplication.DataBase.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("USProApplication.DataBase.Entities.Order", b =>
                {
                    b.HasOne("USProApplication.DataBase.Entities.Counterparty", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("USProApplication.DataBase.Entities.Counterparty", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("USProApplication.DataBase.Entities.Order", "ParentOrder")
                        .WithMany("ChildOrders")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Executor");

                    b.Navigation("ParentOrder");
                });

            modelBuilder.Entity("USProApplication.DataBase.Entities.Order", b =>
                {
                    b.Navigation("ChildOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
